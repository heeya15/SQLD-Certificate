모델링
- [ 모델이라고 하는 것 ]은 [ 모형, 축소형의 의미 ]로, 사람이 살아가면서 나타날 수 있는 다양한 형상에 대해서
  [ 일정한 표기법에 따라 표현해 놓은 모형 ]
- [ 사람이 어떤 목적을 달성하기 위해 ] [ 커뮤니케이션 효율성을 극대화한 고급화한] 
  일종의 표현 방법이라고 볼 수 있다.
- 사람이 살아가면서 접할 수 있는 다양한 현상은 [ 사람, 사물 ,개념 ]등에 의해 발생된다고 했을 때,
  [ 모델링은 ] 이것을 표기법에 따라 [ 표기하는 것 자체를 의미 ]한다.
즉, 모델을 만들어가는 일 자체를 모델링으로 정의할 수 있다.

<< 모델링에 대한 다양한 정의 >
- 어떤 것에 대한 예비 표현 
- 복잡한 "현실 세계" 를 [ 단순화해 표현하는 것 ]
- 현실세계를 [ 추상화한 반영 ]

----  p, 15 ----    
-데이터 [ 모델링의 특징 ] (3대 특징)   -- 추상화, 단순화, 명확화  -

1. 추상화: 현실세계를 간략하게 표현, 현실세계를 [ 일정한 형식에 맞추어 표현 ]

2. 단순화: 복잡한 현실세계를 [ 약속된 규약 ]에의해 [ 제한된 표기법이나 언어로 표현 ]하여
           쉽게 이해할수 있도록 하는것.

3. 명확화: [ 누구나 이해하기 쉽게 ] 대상에 대한 의미적 해석이 
           애매모하거나 중첩적이지 않고 [ 명확(정확)해야 한다. ] 

​따라서, [ 모델링을 다시 정의 ]하자면
- '현실세계를 추상화, 단순화, 명확화하기 위해 일정한 표기법에 의해 표현하는 기법' 


-데이터 [ 모델링의 3 가지 관점 ] - 데이터, 프로세스, 데이터와 프로세스 상관관점.

1. 데이터 관점: 업무가 [ 어떤 데이터와 관련이 있는지 ] 또는[  데이터 간의 관계는 무엇 ]인지 모델링하는 방법

2. 프로세스 관점: [ 실제하고 있는 업무는 무엇 ]인지 또는 무엇을 해야하는지 모델링하는 방법

3. 데이터와 프로세스 상관관점 : [ 업무가 처리하는 일의 방법에 따라 ]
                                            데이터는 어떻게 영향을 받고 있는지 모델링하는 방법

p, 16 

- 데이터 모델은 데이터베이스 골격을 이해하고 그 이해를 바탕으로  
  SQL 문장을 기능과 성능적인 측면에서 효율적으로 작성하기 위해 꼭 알아야 하는 핵심요소.

데이터 모델링 하는 목적
1. 업무정보를 구성하는 기초가 되는 정보를 일정한 표기법에 따라 표현함으로 
   구축의 대상이 되는 업무 내용을 정확하게 분석하는 것이다.
2. 분석한 모델을 가지고 실제 데이터 베이스를 생성하여 [ 개발 및 데이터 관리에 사용하기 위함 ]

즉, 데이터 모델링은 단지 [ 데이터베이스만을 구축 하기위한 용도로만 쓰이는 것 X ]
데이터 모델링 자체로서 [ 업무를 설명하고 분석하는 부분 ]에도 매우 중요한 의미 

데이터 모델링이란?
1. 정보시스템을 구축하기 위한 [ 데이터 관점의 업무 분석 기법 ]
2. 현실세계의 데이터에 대해 [ 약속된 표기법에 의해 표현하는 과정 ]
3. 데이터베이스를 구축하기 위한 [ 분석 설계의 과정 ]
 
-- P,17 

3. 데이터 모델링의 중요성 및 유의점 ( 3가지)
1. 파급효과
2. 복잡한 정보 요구사항의 간결한 표현
3. 데이터 품질

< 가. 파급효과 >
시스템 구축을 하는데 있어서 많은 어플리케이션들이 단위테스트, 병행테스트, 통합테스트를 수행하게 된다.
만약 이러한 시점에서 [ 데이터 모델의 변경이 불가피한 상황이 발생 할 때 ], 
이를 위해 데이터 구조의 변경에 따른 영향 분석 등이 일어나게 된다.
이 시기의 데이터 구조의 변경으로 인한 
[ 일련의 변경작업은 ] [ 전체 시스템 구축 프로젝트 ] 에서 [ 큰 위험요소로 작용 ] 하게 된다.
그렇기 때문에 다른 어떤 설계 과정보다 [ 데이터 설계를 하는 것 ]은
[ 파급효과를 지니기 때문 ]에 중요성으로 간주될 수 있다


< 나. 복잡한 정보 요구사항의 간결한 표현(Conciseness) >

데이터 모델은 구축할 시스템의 [ 정보 요구사항과 한계를 가장 명확 ]하고 [ 간결하게 표현할 수 있는 도구 ]이다.
정보 요구사항을 파악하는 [ 가장 좋은 방법은 ] 수 많은 기능적인 요구사항을 파악하는 것 보다, 
[ 간결하게 그려져있는 데이터모델을 보면서 파악하는 것이 빠르다. ]
이렇게 그려진 데이터 모델을 보면서 파악하기 위해, 
- 데이터모델은 [ 요구사항이 정확하고 간결하게 표현되어야 한다는 것 ]이다.

< 다. 데이터 품질(Data Quality) >

기업에서 데이터는 오랫동안 저장되어질 수 있는데, 오래된 데이터가 만약 정확성이 떨어지는 데이터가 존재하면 안된다.
[ 이러한 데이터 품질의 문제는 ] 데이터 구조가 설계되는 [ 초기에 ]
[  데이터가 조금 밖에 쌓이지 않을 경우 ] 인지할 수 없게 된다.
데이터 품질의 문제가 이야기되는 중대한 이유 중 하나가 바로 [ 데이터 구조의 문제 ]이다.
구조에서 비즈니스 정의의 불충분, [ 동일한 성격 데이터 ] 통합하지 않고 분리한경우 


데이터 모델링을 할 때 [ 세 가지를 유의 ]하여 모델링 해야한다.

1) 중복(Duplication)

데이터베이스가 [ 여러 장소에 같은 정보를 저장하지 않도록 ] 한다.

2) 비유연성(Inflexibility)

[ 데이터모델이 수시로 변경될 경우 ] [ 유지보수가 어려워 질 수 있다. ]
이를 위해 [ 데이터의 정의 ]를 [ 데이터 사용 프로세스와 분리 ]해야한다.
그러므로 데이터 혹은 프로세스의 작은 변화가 
애플리케이션과 데이터베이스에 중대한 변화를 일으킬 수 있는 가능성을 줄이도록 한다.


3) 비일관성(Inconsistency)

개발자가 [ 다른 데이터와 모순된다는 고려 없이 ] 일련의 데이터를 수정할 수 있기 때문에 
[ 데이터의 중복이 없더라도 ] [ 비일관성이 발생할 수 있다. ]
그러므로 [데이터와 데이터간의 상호 연관 관계 ]에 대한 [ 명확한 정의가 필요 ]하다.

P,19 
- 데이터 모델링의 3단계 - 

1. 개념적 데이터 모델링( Conceptual Data Modeling)

개념적 데이터베이스 설계는 조직, 사용자의 [ 데이터 요구사항을 찾고 분석 ]하는데서 시작한다. 
이 단계에서 [ 핵심 엔티티와 ] [ 그들 간의 관계를 발견 ] 하고,
그것을 표현하기 위해서 엔티티-관계(ER) 다이어그램을 생성하는 것이다.
생성된 [ 엔티티-관계 다이어그램은 ] 조직과 다양한 데이터베이스 사용자에게 
어떠한 데이터가 중요한지 나타내기 위해서 사용하게 된다.
데이터 모델링 과정이 [ 전 조직에 걸쳐 ] 이루어진다면, 그것은 [ 전사적 데이터 모델 ]이라고 한다. 
개념 데이터 모델을 통해 조직의 데이터 요구를 공식화 하는 것은 [ 두 가지의 중요한 기능을 지원 ]하게 된다.
첫째, 사용자와 시스템 개발자가 [ 데이터 요구사항을 발견하는 것을 지원 ]
둘째, [ 현 시스템이 어떻게 변형되어야 하는가 ]를 이해하는데 유용

2. 논리적 데이터 모델링:
논리 데이터 모델링은 데이터베이스 설계 프로세스의 Input으로서 
비즈니스 정보의 [ 논리적인 구조와 규칙을 명확하게 표현 ]하는 기법 또는 과정이다.
논리 데이터 모델링의 결과로 얻어지는 논리 데이터 모델은 [ 데이터 모델링이 최종적으로 완료된 상태 ]라고 정의할 수 있다.
즉, [ 물리적인 스키마를 설계하기 전 단계의 ] [ 데이터 모델 상태 ]를 일컫는 말이다.

논리적 데이터 모델링의 핵심은 어떻게 데이터를 엑세스하고, 누가 데이터에 엑세스하며, 
그러한 엑세스의 전산화와는 다르게 독립적으로 기록하는 것이다. 
즉, 누가(Who), 어떻게(How : Process), 그리고 전산화와는 별개로 
비즈니스 데이터에 존재하는 사실들을 인식하여 기록하는 것이다.

[ 데이터 모델링 과정에서 가장 핵심이 되는 부분 ]이 [ 논리 데이터 모델링 ]이라고 할 수 있다.

이 단계에서 수행하는 또 한가지 중요한 활동은 [ 정규화 ]이다. 
정규화는 논리 데이터 모델 [ 상세화 과정의 대표적인 활동 ]으로, 
논리 데이터 모델의 [ 일관성을 확보 ]하고 [ 중복을 제거 ]하여 속성들이 가장 적절한 엔티티에 배치되도록 함으로써 
[ 보다 신뢰성 있는 데이터 구조를 얻는데 목적 ]이 있다.
논리 데이터 모델의 상세화는 [ 식별자 확정 ], 정규화, M:M관계 해서, 참조 무결성 규칙 정의 등을 들 수 있고,
추가적으로 이력 관리에 대한 전략을 정의하여 이를 논리 데이터 모델에 반영함으로써 데이터 모델링을 완료하게 된다.

3. 물리적 데이터 모델링:

물리 데이터 모델링은 [ 논리 데이터 모델의 데이터 저장소 ]로서 
[ 어떻게 컴퓨터 하드웨어에 표현될 것인가 ]를 다루게 된다.
데이터가 물리적으로 컴퓨터에 어떻게 저장될 것인가에 대한 정의를 [ 물리적 스키마 ]라고 한다.
이 단계에서 결정되는 것은 [ 테이블, 칼럼 등으로 표현되는 물리적인 저장구조 ]와 
사용될 저장장치, 자료를 추출하기 위해 사용될 접근 방법 등이 있다.

​
개념,논리, 물리 데이터 모델 정리 
개념적 데이터 모델링 : 추상화 수준이 높고 업무 중심적이고 포괄적인 수준의 모델링 진행, 전사적 데이터 모델링
논리적 데이터 모델링 : 구축하고자 하는 업무에 대해 KEY, 속성, 관계등을 정확하게 표현, 재사용성이 높음.
물리적 데이터 모델링 : 실제로 데이터베이스에 이식할 수 있도록 성능, 저장 등 물리적인 성격을 고려하여 설계

P,22 
6. 데이터 모델링에서 데이터독립성의 이해
가. 데이터 독립성의 필요성
어떤 단위에 대해 [ 독립적인 의미를 부여 ]하고 그것을 [ 효과적으로 구현하게 되면 ] 
자신이 가지는 [ 고유한 특징을 명확하게 할 뿐만 아니라 ] [ 다른 기능의 변경으로부터] [ 쉽게 변경되지 않고 ] 
자신의 고유한 기능을 가지고 기능을 제공하는 장점을 가질 수 있게 된다.
데이터 독립성의 반대말은 [ 데이터 종속성 ]이다.
데이터종속성이 심해지게 되면 유지보수 비용증가, 데이터 중복성 증가, 데이터 복잡도 증가, 요구사항 대응 저하 등의 문제가 발생하게 된다.
그래서 [ 데이터 독립성을 확보하면 ] 다음과 같은 효과를 얻을 수 있다.
- 각 View의 독립성을 유지하고 [ 계층별 View에 영향을 주지 않고 변경가능 ]
- 단계별 스키마에 따라 데이터 정의어(DDL)와 데이터 조작어(DML)가 다름을 제공하게 된다.

7. 데이터 모델링의 중요한 세 가지 개념

가. 데이터 모델링의 세 가지 요소
- 데이터 모델에 대한 이해의 근간이 되므로 ** 반드시 기억 *** - 

1) 업무가 관여하는 [ 어떤 것 ](Things)

2) 어떤 것이 가지는 [ 성격 ](Attributes)

3) 업무가 관여하는 어떤 것 간의 [ 관계 ](Relationships)


이 세가지는 [ 데이터 모델링을 완성해가는 핵심 개념 ] 으로서 결국 [ 엔티티, 속성, 관계 ]로 인식되는 것이다.

[ 사물 ]이나 [ 사건들을 ] 지칭하는 용어를 [ 어떤것 ]이라고 하고,
그 어떤것이 가지는 [ 세부적인 사항을 ] [ 성격 ]이라고 하고,
또한 각각 어떤것은 [ 다른 어떤것과 연관성을 가질 수 있는데 ] 이것을 [ 관계 ]라고 하는 것이다.

7. 데이터 모델링의 중요한 세 가지 개념



가. 데이터 모델링의 세 가지 요소

1) 업무가 관여하는 어떤 것(Things)
2) 어떤 것 간의 연관(Relationships)
3) 어떤 것의 성격(Attributes)


p,27 
우리가 구축하려는 시스템은 데이터에 기반한, 데이터가 중심에 있는 정보 시스템
따라서 정보시스템의 핵심에 있는 데이터베이스 설계를 잘못했을 때 미치는 영향력은 모든 프로그램, 
데이터베이스에 발생되는 모든 트랜잭션에 영향을 미칠 수밖에 없다.

p,28
- Chen 표기법 : 1976년 피터첸이 Entity-Relationship Model(E-R 모델)이라는 표기법을 만듬
엔터티 : 사각형
관계 : 마름모
속성 : 타원형 
데이터 설계에 대해 우리나라 대학에서는 주로 이 [ 첸의 모델 표기법을 통해 ] 배우고 있다.
- 실무적으로 사용 x 

​p,30
- ERD:Entity Relationship Diagram
[ 정보공학을 기반으로 하는 모델링 ]에서는 해당 업무에 
[ 가장 적절한 ERD를 그려내는 것 ]이 프로젝트의 지상과제 


 << ERD 작업순서 >>
①엔터티를 도출하고 그린다. 여기서 엔터티란 업무에서 관리해야 하는 집합

②엔터티를 적절하게 배치한다. 중요한 엔터티는 왼쪽 상단에 배치한다.

③엔터티 간의 관계를 설정한다.

④관계명을 기술한다.

⑤관계 참여도를 표현(기술)한다.

⑥관계의 필수 여부를 표현(기술)한다.

​
10. 좋은 데이터 모델의 요소

가. 완전성(Completeness)

나. 중복배제(Non-Redundancy)

다. 업무규칙(Business Rules)

라. 데이터 재사용(Data Reusability)

마. 의사소통(Communication)

바. 통합성(Integration)


p,37

1. 엔티티의 개념

Peter Chen (1976) : 변별할 수 있는 사물

C.J Data (1986) : 데이터베이스 내에서 변별 가능한 객체

James Martin (1989) : 정보를 저장할 수 있는 어떤 것

Thomas Bruce (1992) : 정보가 저장될 수 있는 사람, 장소, 물건, 사건 그리고 개념 등


위 정의들의 공통점

- 엔티티는 사람, 장소, 물건, 사건 개념 등의 [ 명사 ]

- 엔티티는 업무상 관리가 필요한 [ 관심사 ]

- 엔티티는 저장이 되기 위한 [ 어떤 것(Things) ]


엔티티란 "업무에 필요하고 유용한 정보를 저장하고 관리하기 위한 집합적인 것(Thing)"이다. 

이 엔티티는 업무 활동상 지속적인 관심을 가지고 있어야 하는 대상으로서

그 대상들 간에 동질성을 지닌 인스턴스들이나 그들이 행하는 행위의 집합으로 정의 할 수 있다.


[ 엔티티는 ] 그 집합에 속하는 개체들의 특성을 설명할 수 있는 [ 속성(Attribute)를 갖고 ], [ 인스턴스의 집합 ]이라고 말할 수 있다.

[ 인스턴스는 ] [ 엔티티 하나의 값 ]에 해당한다. 

- 예를들어 [ 과목 ]은 수학, 영어, 국어가 존재 할 수 있는데 여기서 엔티티의 [ 인스턴스는 ] 각각의 과목에 해당하는 것이다.

- 엔티티는 눈에 보이는 것 뿐만 아니라 [ 눈에 보이지 않는 개념들도 엔티티 ]라고 할 수 있다.


p,39 ~ 41

3. 엔터티의 특징
* [ 인스턴스는 ] 릴레이션이 가질 수 있는 값. 행의 수
(인스턴스는 행row, 속성은 열column이라고 보면 됩니다)

- [ 업무에서 필요하고 관리 ]하고자 하는 정보이어야 한다
- [ 유일한 식별자 ]에 의해 식별이 가능해야함
- [ 인스터스의 집합 ]이어야 한다. ( '한 개'가 아니라 '두 개 이상')
- 엔터티는 [ 업무 프로세스에 의해 이용돼야 ] 한다.
- 엔터티는 반드시 [ 속성이 있어야 ] 한다.
- 다른 엔터티와 [ 최소 한 개 이상의 관계 ]가 있어야한다.

가. 업무에서 필요로 하는 정보
- 시스템 구축 대상인 해당 업무에서 [ 그 엔터티를 필요로 하는가를 판단 ]하는 것이 중요함.

나. 식별이 가능해야 함
[ 식별자(Unique Identifier)에 ] 의해 식별이 가능해야 하고, 
[ 인스턴스가 ] 식별자에 의해 한 개씩만 존재하는지 검증해 보아야 한다. 
[ 유일한 식별자는 ] 그 엔터티의 인스턴스만의 [ 고유한 이름 ]이다. 

- 예를들어 직원을 구분할 수 있는 방법은 [ 이름이나 사원번호 ]가 될 수 있는데, 
[ 이름은 ]  동명이인이 존재할 수 있으므로 유일한 식별자가 될 수 없다.

이름 : 유일한 식별자 x
사원번호 : 유일한 식별자 o   -- 회사에 입사한 사람에게 고유하게 부여된 번호 

다. 인스턴스의 집합

영속적으로 존재하는 인스턴스의 집합이 되어야 한다는 점이다. 
엔티티의 특징 중 "한 개"가 아니라 "두 개 이상" 이라는집합 개념은 매우 중요한 개념이다. 
그리고 [ 하나의 엔터티 ]는 여러 개의 인스턴스를 포함하게 된다.


라. 업무프로세스에 의해 이용되어야 한다.

업무프로세스에 의해 CREATE, READ, UPDATE, DELETE 등이 발생하지 않는 
[ 고립된 엔티티의 경우 ] 엔티티를 제거하거나 아니면 누락된 프로세스가 존재하는지 살펴보고 해당 프로세스를 추가해야 한다.


마. 속성을 포함

- 엔터티에는 [ 반드시 속성이 포함 ]되어 있어야 한다. 
- 예외적으로 [ 관계 엔터티의 경우]  주식별자 속성만 가지고 있어도 엔티티로 인정하게 된다.


바. 관계의 존재

엔티티는 [ 다른 엔티티와 최소 한 개 이상의 관계가 존재 ]해야 한다는 것이다.

단,  데이터 모델링을 하면서 [ 관계를 생략하여 표현해야 하는 경우 ]는 
통계성 엔티티 도출, 코드성 엔티티 도출, 시스템 처리시 내부 필요에 의한 엔티티 도출과 같은 경우가 있다.

p,44
4. 엔티티의 분류

가. [ 유형 무형에 따른 ] 분류 ( 일반적으로 3가지 )  
--> 유형, 개념, 사건 엔터티 

- [ 유형 ]엔티티(Tangible Entity) : 물리적인 [ 형태가 있고 ], 안정적이며, [ 지속적으로 활용 ]되는 엔티티
  ex ) 사원,물품, 강사

- [ 개념 ]엔티티(Conceptual Entity) : 물리적인 형태는 [ 존재하지 않고 ] 관리해야 할 [ 개념적 정보로 구분 ]이 되는 엔티티로 조직됨
   ex) 조직, 보험상품

- [ 사건 ]엔티티(Event Entity) : [ 업무를 수행함에 따라 ] 발생되는 엔티티로서 [ 비교적 발생량이 많으며 ] 
                                           [ 각종 통계자료에 이용 ] 될 수 있음
   ex ) 주문, 청구, 미납 


나. [ 발생시점에 ] 따른 분류 ( 기본엔터티, 중심 엔터티, 행위 엔터티 )

1) 기본엔티티
- 키 엔터티, 다른 엔터티의 영향없이 독립적 생성
[ 업무에 원래 존재하는 정보 ]로서 [ 다른 엔티티와 관계에 의해 생성되지 않고 ] [ 독립적으로 생성이 가능 ]하고, 
  자신은 [ 타 엔티티의 부모의 역할 ]을 하게 된다.
- 다른 엔티티로부터 [ 주 식별자를 상속받지 않고 ] [ 자신의 고유한 주식별자를 ] 가지게 된다. 
  ex) 사원, 부서, 고객, 상품,등

2) 중심엔티티
- 기본 엔터티로부터 발생되어 [ 행위 엔터티를 생성 ]

[ 기본 엔티티로부터 발생 ]되고, 그 업무에 있어서 [ 중심적인 역할을 ] 하게 된다. 

- 데이터의 양이 많이 발생되고 다른 엔티티와의 관계를 통해 많은 [ 행위 엔티티를 생성 ]하게 된다.
  ex) 계약, 청구, 주문,매출

3) 행위엔티티

[ 두 개 이상의 부모엔티티로부터 발생 ]되고 [ 자주 내용이 바뀌거나 데이터 양이 증가 ]된다. 
분석초기단계에서는 잘 나타나지 않으며, [ 상세 설계단계나 프로세스와 상관모델링을 진행 ]하면서 도출 될 수 있다.
ex) 주문목록, 사원변경이력

이 밖에도 엔티티가 스스로 생성될 수 있는지 여부에 따라 독립엔티티인지 의존엔티티인지 구분 할 수 있다.

p,45
5. 엔티티의 명명

- [ 현업업무에서 사용 ] 하는 용어를 사용

- [ 약어를 ]  사용하지 않음

- [ 단수명사를 ] 사용

- [ 모든 엔티티에서 ] 유일하게 이름이 부여

- 엔티티 [ 생성의미대로 이름을 부여 ]

p,46

제 3절 속성(Attribute)

1. 속성의 개념

[ 사전적 ]인 의미 : 사물의 성질, 특징 또는 본질적인 성질, 그것이 없다면 [ 실체를 생각할 수 없는 것 ]

[ 데이터 모델링 관점 ]에서의 의미 : 업무에서 필요로 하는 인스턴스로 관리하고자 하는 
                                              [ 의미상 더 이상 분리되지 않는 최소의 데이터 단위 ]


 ** [ 속성의 정의 ]를 정리하자면 ** 

- 업무에서 필요로 함 

- 의미상 [ 더 이상 분리되지 않음 ] 

- 엔티티를 설명하고 [ 인스턴스의 구성요소 ]가 됨


p,47 
2. 엔티티, 인스턴스와 속성, 속성값에 대한 내용과 표기법

가. 엔티티, 인스턴스, 속성, 속성값의 관계

- 엔티티에는 [ 두 개이상의 인스턴스가 존재 ]하고 
  각각의 엔티티에는 [ 고유의 성격을 표현하는 속성정보를 두 개 이상 ] 갖는다.
- [ 인스턴스들의 성격을 구체적으로 나타내는 ] 항목이 '속성' 이다.

- 각각의 인스턴스는 [ 속성의 집합 ]으로 설명
엔티티 내에 있는 하나의 인스턴스는 각각의 속성들에 대해 한 개의 속성값 만을 가질 수 있다.

예를 들면, 사원의 [ 이름 ]은 홍길동이고 [ 주소는 ] 서울시 강남구이며, [ 전화번호는 ] 1234-255, [ 직책은 ] 대리 일 때
[ 속성은 ] 이름, 주소, 전화번호, 직책이고 [ 속성값 ]은 홍길동, 서울시 강남구, 1234-255, 대리이다. 

<< 엔터티, 인스턴스, 속성, 속성값에 대한 관계를 분석하면 

- 한 개의 엔티티는 [ 두 개 이상의 인스턴스의 집합 ]이어야 한다.

- 한 개의 엔티티는 [ 두 개 이상의 속성 ]을 갖는다.

- 한 개의 인스턴스는 한 개의 속성값을 갖는다.


p,48
3. 속성의 특징

- 엔티티와 마찬가지로 반드시 해당 업무에서 필요하고 관리하고자 하는 정보여야 한다.

- 정규화 이론에 근간하여 정해진 [ 주식별자에 함수적 종속성을 ] 가져야 한다.  (기본키 변경->값도 변경)

- [ 하나의 속성 ]에는 [ 한 개의 값만을 ] 가진다. 
하나의 속성에 여러 개의 값이 있는 [ 다중값일 경우]  [ 별도의 엔티티를 이용하여 분리 ]한다.


p,49
4. 속성의 분류

가. 속성의 특성에 따른 분류  ( 기본 속성, 설계속성, 파생속성) 

1) 기본속성

기본속성은 [ 업무로부터 추출한 모든 속성이 해당 ]되며, [ 가장 일반적이고 많은 속성을 ] 차지한다.

코드성 데이터, 엔티티를 식별하기 위해 부여된 일련번호, 그리고 다른 속성을 계산하거나 영향을 받아 생성된 속성을 
[ 제외한 모든 속성 ]은 기본속성이다.

주의해야 할 것은 업무로부터 분석한 속성이라도 [ 이미 업무상코드로 정의한 속성이 많다는 것 ]이다.
이런 경우는 기본 속성이 되지 않는다.


2) 설계속성

설계속성은 [ 업무상 필요한 데이터 이외에 ] 데이터 모델링을 위해, 
[ 업무를 규칙화 하기 위해 ] 속성을 새로 만들거나 변형하여 정의하는 속성이다.

대게 코드성 속성은 원래 속성을 [ 업무상 필요에 의해 변형하여 만든 ] 설계 속성이고 
일련번호와 같은 속성은 [ 단일한 식별자를 부여하기 위해 ] 모델 상에서 새로 정의하는 설계 속성이다.
ex ) 상품코드

3) 파생속성

파생속성은 [ 다른 속성에 영향을 받아 발생하는 속성 ]으로 [ 보통 계산된 값들 ]이 이에 해당한다.

[ 다른 속성에 영향을 받기 때문에 ] 프로세스 설계 시 [ 데이터 정합성을 유지하기 위해 유의해야 할 점이 많으며 ] 
[ 가급적 파생속성을 적게 정의하는 것 ]이 좋다.

ex) 계산값, 합계 , 평균
* [ 파생 속성을 정의한 경우 ] 속성정의서에 파생속성이 갖는 [ 업무로직을 기술 ]하여 [ 데이터의 정합성 ]을 유지할 수 있도록 해야한다.


p,50 
나. 엔티티구성방식에 따른 분류

- PK(Primary Key) 속성 : [ 엔티티를 식별 ] 할 수 있는 속성 (기본키)

- FK(Foreign Key) 속성 : [ 다른 엔티티와의 ] [ 관계에서 포함된 속성 ] (외래키)

- 일반속성 : [ PK, FK에 포함되지 않는 속성 ]


< 속성은 그 안에 세부 의미를 쪼갤 수 있는지에 따라 [ 단순형, 복합형 ]으로 분류할 수 있다.

- [ 단순 ] 속성 : 더 이상 [ 다른 속성들로 구성될 수 없는 ] 단순한 속성
ex) 나이, 성별

- [ 복합 ] 속성 : [ 여러 세부 속성들로 ] 구성될 수 있는 속성
ex) 주소 --> 시,구,동,번지 같은걸로 구성될수 있음 


- 단일값 속성 : 속성 하나에 [ 한 개의 값을 가지는 속성 ]
ex) 주민등록번호

- 다중값 속성 : 여러 개의 값을 가지는 속성, 하나의 엔티티에 포함 될 수 없으므로
                    [  1차 정규화를 하거나 ] [  별도의 엔티티를 만들어 ] [ 관계로 연결함 ]
ex) 전화번호 --> 집, 휴대전화, 회사 전화번호,  자동차의 색상 --> 차 지붕, 차체, 외부 색이 다를수 있다. 


p,51
5. 도메인(Domain)

각 속성은 [ 가질 수 있는 값의 범위를 ] 가지게 되는데 이를 그 속성의 도메인이라고 한다.

예를 들어 학생이라는 엔티티가 있을 때 [ 학점 ]이라는 속성의 도메인은 0.0에서 4.5 사이의 실수 값이며
[  주소 ]라는 속성은 길이가 20자리이내인 문자열로 정의 할 수 있다. 

각 속성은[  도메인 이외의 값을 ] 갖지 못하며 도메인은 엔티티 내에서 
[ 속성에 대한 [ 데이터 타입과 크기 ] ], 그리고 [ 제약사항을 지정 ]하는 것이다.


6. 속성의 명명(Naming)
- [ 용어 사전 ] 과 [ 도메인정의 ]를 같이 사용하여 프로젝트를 진행할 경우 
  용어적 표준과 데이터타입의 일관성을 확보할 수 있게된다.
 
< 속성명을 부여하는 원칙 >

- 해당 업무에서 사용하는 이름을 부여

- [ 서술식 속성명은] 사용하지 않음

- [ 약어 사용 ]은 가급적 제한

- 전체 데이터모델에서 [ 유일성을 확보 ]하는 것이 좋음


p,53
제 4절 관계(Relationship)

1. 관계의 개념

가. 관계의 정의

사전적 정의 : 상호 연관성이 있는 상태

데이터 모델에 의한 정의 : [ 엔티티의 인스턴스 사이의 ] 논리적인 연관성으로서 존재의 형태로서나 행위로서 
                                    [ 서로에게 연관성이 부여된 상태 ]

- 관계는 엔터티와 엔터티 간 연관성을 표현


나. 관계의 패어링

- 관계는 엔티티 안에 [ 인스턴스가 개별적으로 관계를 가지는 것 ](패어링)이고 [ 이것의 집합을 ] 관계로 표현한다는 것이다.
- 각각의 엔티티의 [ 인스턴스들은 ] [ 자신이 관련된 인스턴스들과 ] 관계의 어커런스로 참여하는 형태를 
  관계 패어링(Relationship Paring)이라 한다. 
- 엔티티 내에 인스턴스와 인스턴스사이에 [ 관계가 설정된 어커런스를 ] 관계 패어링이라고 한다.
최초의 ERD 모델에서는 관계는 속성을 가질 수 있었으나 [ 요즘의 ERD 에서는 ] 관계를 위해 [ 속성을 도출하지 않는다. ]

[ 관계의 표현 ]에는 이항관계(Binary Relationship), 삼항관계(Ternary Relationship),  n항관계가 존재 할 수 있다.

p,54
2. 관계의 분류

[ 존재 ]의 의한 관계 / [ 행위에 ] 의한 관계

ex) 사원은 부서에 [ 항상 속해있다. ] / 주문은 [ 고객이 주문을 할 때 ] 발생된다

연관관계 = 존재적 관계 (실선)  , 의존관계 = 행위에 의해 관계가 형성될때  ( 점선)

P,55
3. 관계의 표기법

- 관계명(Membership) : 관계의 이름

- 관계[ 차수 ](Cardinality) : 1:1, 1:M, M:N

- 관계[ 선택사양 ](Optionality) : 필수관계(Mandatory), 선택관계(Optional)

- 관계가 시작되는 편을 [ 관계시작점 ], 받는 편을 [ 관계 끝점 ]이라고 부른다.


- 애매한 동사를 피한다 --> ex) '관련이 있다' , '이다' ...
- 현재형으로 표현한다 --> ex) '수강을 신청했다' --> '수강신청 한다.' 이런식으로 . 

-관계 차수(Cardinality)

두 개의 엔터티 간에 [ 관계에 참여하는 수. ] 

1대1 관계: 하나의 엔터티에 관계되는 엔터티의 관계가 하나인 완전 1대1, 
               하나의 엔터티에 관계되는 엔터티의 관계가 하나이거나 없을 수도 있는 선택적 1대1 관계.

1대N 관계: 엔터티에 행이 하나 있을때 [ 다른 엔터티의 값이 여러 개 있는 관계. ] 

M대N 관계: [ 두 개의 엔터티가 ] [ 서로 여러 개의 관계를 가지고 있는 것. ] 카테시안 곱 발생-> 1대N, N대1 관계로 해소 필요

p,58
다. 관계 선택사양

[ 필수 참여관계 ]
ex)  주문서는 반드시 주문목록을 가져야한다

[ 선택 참여관계 ]
ex) 목록은 주문이 될 수도 있고, 주문되지 않는 목록이 있을수도
선택참여관계는 ERD에서 관계를 나타내는 선에서 [ 선택참여하는 엔티티 쪽 ]을 [ 원으로 표시 ]
[ 필수참여는 ] 아무런 표시를 하지 않는다. 

p,59
4. 관계의 정의 및 읽는 방법

가. 관계 체크 사항

- 두 개의 엔티티 사이에 관심있는 연관규칙이 존재하는가?

- 두 개의 엔티티 사이에 정보의 조합이 발생되는가?

- 업무기술서, 장표에 관계연결에 대한 규칙이 서술되어 있는가?

- 업무기술서, 장표에 관계연결을 가능하게 하는 동사가 있는가?


나. 관계 읽기

- 기준(Source) 엔티티를 [ 한 개 ] 또는 각으로 읽는다.

- 대상 엔티티의 [ 관계참여도 즉 개수를 읽는다. ]   --> 한명, 여러명.. 

- 관계선택사양과 [ 관계명을 ] 읽는다. --> ex) 속한다, 소속된다. 


