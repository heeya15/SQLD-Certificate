p,280

-서브쿼리란?

서브쿼리란 SELECT 문 안에 [ 다시 SELECT 문을 사용하는 SQL문 ]입니다. 
FROM구에 SELECT를 사용하면 [ 인라인 뷰 ], SELECT문에 사용하면 [ 스칼라 서브쿼리(Scala Subquery) ],
WHERE문에 사용하면 [ 서브쿼리라고 ] 합니다. 

[ 서브쿼리 밖에 있는 SELECT문이 ] [ 메인쿼리 ]가 됩니다. 


서브쿼리 : 하나의 SQL 문안에 포함돼 있는 또 다른 SQL 문을 말한다.
메인 쿼리가 [ 서브쿼리를 포함 ]하는 종속적인 관계 

즉, 메인쿼리 수행 후 서브쿼리 수행.

< 조인 >

테이블들이 서로 대등한 관계이기 때문에 [ 서로의 칼럼을 자유롭게 사용할수 있음 ]


- [ 서브쿼리는 ] 메인 쿼리의 컬럼을 [ 모두 사용가능 ] ****!! 
- 메인쿼리는 [ 서브 쿼리의 칼럼을 사용할 수 없다 ]. 

- 서브쿼리는 [ 서브쿼리 레벨과는 상관없이 ] [ 항상 메인 쿼리 레벨로 결과 집합이 생성 ]된다.
ex) 메인쿼리로 조직(1) , 서브쿼리로 사원(M) 테이블을 사용하면 결과 집합은 조직(1) 레벨이 된다.  

서브쿼리를 사용할때 주의사항

① 서브쿼리를 괄호로 감싸서 사용한다. 

② 서브쿼리는 단일 행(Single Row) 또는 복수 행(Multiple Row) [ 비교 연산자와 함께 사용 가능 ]하다.
 [ 단일 행 비교 연산자는 ] 서브쿼리의 결과가 [ 반드시 1건 이하 ]이어야 하고 
 [ 복수 행 비교 연산자는 ] 서브쿼리의 결과 건수와 상관 없다. 

③ [ 서브쿼리에서는 ] ORDER BY를 사용하지 못한다. 

ORDER BY절은 [ SELECT절에서 오직 한 개만 올 수 있기 때문에 ] ORDER BY절은 [ 메인쿼리의 마지막 문장에 위치 ]해야 한다.


서브쿼리가 [ SQL문에서 사용이 가능한 곳 ]

- SELECT 절

- FROM 절

- WHERE 절

- HAVING 절

- ORDER BY 절

- INSERT문의 VALUES 절

- UPDATE문의 SET 절


p,281

서브쿼리는 [ 동작방식 ]이나 [ 출력 데이터의 형태에 따라 ] [ 두 종류로 분류 ]된다.

서브쿼리 종류 (2가지)
1. 동작방식 
2. 출력 데이터의 형태에 따라  

< 동작방식에 따른 분류 ( 2가지) >

1. Un-Correlated(비연관) 서브쿼리
서브쿼리가 [ 메인쿼리 칼럼을 가지고 있지 않는 형태 ]의 [ 서브쿼리 ]이다. [ 메인쿼리에 값을 제공하기 위한 목적 ]으로 주로 사용한다


2. Correlated(연관) 서브쿼리

서브쿼리에 메인쿼리의 칼럼이 존재하는 서브쿼리

(서브쿼리 결과 값을 메인쿼리 결과 값과 비교하기 위한 목적)

 

< 반환되는 데이터 형태에 따른 분류 ( 3가지) >


1. 단일행(Single Row) 서브쿼리

[ 실행결과가 1건 이하 ]인 서브 쿼리를 의미.

단일행 비교연산자(>, =, , <>, <, <=, <=)와 함께 사용된다. 


2. 다중행(Multi Row) 서브쿼리

[ 실행결과가 여러 건 ]인 서브쿼리

다중행 비교연산자(IN, ALL, ANY, SOME, EXISTS)와 함께 사용된다


 
3. 다중칼럼(Multi Column) 서브쿼리

실행결과로 [ 여러 칼럼을 반환 ]
메인쿼리의 조건절에 여러 칼럼을 동시에 비교할 수 있다.

[ 서브쿼리와 메인쿼리의 ] 비교하고자 하는 [ 칼럼 개수와  칼럼의 위치가 동일 ]해야한다

 
P,281 ~282

[ 단일 행 서브 쿼리 ] 
- 선수명 = player_name
- 포지션 = position
- 백넘버 = back_no
[ 강남일 선수가 소속된 팀(team_id) 의 ] 선수들에 대한 정보( 선수명, 포지션, 백넘버)를 표시하는 문제

select player_name as 선수명, position as 포지션, back_no as 백넘버
from player 
where team_id = ( select team_id 
                           from player
                           where player_name = '정남일');
col 선수명 for a15

- 정남일 선수의 소속팀을 알아내는 서브 쿼리가 먼저 수행돼 정남일 선수의 소속팀id가 반환된다.
- 만약 [ 정남일 선수와 같은 이름을 가진 동명이인 ]이 있었다면, [ 2건 이상의 결과가 반환돼 sql 문에 오류가 발생 ]할 것이다. 

p,283
선수들 중에서 [ 키가 평균키 이하 ]인 선수들의 정보를 출력하는 문제 (집계함수를 사용한 서브쿼리)

select player_name as 선수명, position as 포지션, back_no as 백넘버
from player 
where height <= ( select avg(height)
                           from player
                           )
ORDER BY player_name ;
 
p,284
다중 행 서브쿼리
- 서브쿼리의 결과가 2건이상 반환될 수 있다면, 반드시 다중행 비교 연산자(IN,ALL,ANY,SOME)와 함께 사용해야 한다. 그렇지 않으면 SQL 문은 오류를 반환한다.
 

>다중 행 비교 연산자 

1. IN: 메인쿼리 비교조건이 서브쿼리의 결과 중 하나만 동일하면 참이 됩니다

예 : SELECT SAL FROM EMP WHERE SAL IN (100,200,300)

결과 : SAL이 100, 200, 300 인것만 출력된다


2. ALL:  서브쿼리의 결과에 존재하는 [ 모든 값을 만족하는 조건 ]을 의미한다.

          <ALL: [ 최솟값 ]을 반환합니다

          >ALL: [ 최댓값 ]을 반환합니다 

예 : SELECT SAL FROM EMP WHERE SAL >= ALL(100,200,300)

결과 : SAL이 300이상이면 출력된다

 

3. ANY: 메인쿼리의 비교조건이 [ 서브쿼리의 결과 중 하나이상 동일 ]하면 참이 됩니다.

예 : SELECT SAL FROM EMP WHERE SAL >= ANY(100,200,300)

결과 : SAL이 100 이상이면 출력된다


4. EXISTS(서브쿼리) : 메인쿼리와 서브쿼리의 결과가 하나라도 존재하면 참이 됩니다. (참과 거짓을 반환합니다)

- 서브쿼리의 결과를 만족하는 값의 존재여부를 확인하는 조건 여러건이 만족하여도 [ 1건만 찾으면 검색을 멈춘다. ]

P,285
선수테이블 = PLAYER
                 --> 팀 정보ID = TEAM_ID 
----------------------------------------
팀테이블 = TEAM
지역명 = REGION_NAME 
팀명 = TEAM_NAME 
영문팀명 = E_TEAM_NAME

[ 선수들 중 ]에서 '정현수' 라는 선수가 소속된 [ 팀 선수들의 정보를 ] 출력하는 문제 (집계함수를 사용한 서브쿼리) 

-- 단 '정현수' 라는 선수는 [ 동명이인이 있어서 ]  [ 단일행 비교연산자는 X ]


select region_name as 지역명, team_name as 팀명, e_team_name as 영문팀명
from TEAM
where team_id IN ( select team_id
                           from player
                           where player_name = '정현수' 
                          )
ORDER BY region_name ;

[결과 ] 
지역명           팀명                      영문팀명
---------------- ------------------------- ----------------------------------------
성남             일화천마                  SEONGNAM ILHWA CHUNMA FC
전남             드래곤즈                  CHUNNAM DRAGONS FC
-------------------------------------------------------------------------------------------

p, 286

3. 다중칼럼 서브쿼리

다중 칼럼 서브쿼리는 서브쿼리의 결과로 여러 개의 칼럼이 반환되어 메인쿼리의 조건과 동시에 비교되는 것을 의미
(SQL Server 에서는 지원되지 않는 문법)

[ 선수들의 키의 정보 ]는 PLAYER 테이블에 


문제 : [ 소속 팀별 키가 가장 작은 ] 사람들의 정보를 출력하는 문제를 갖고 다중 컬럼 서브쿼리를 알아보도록 한다.
[ 소속팀별 키가 가장 작은 ]사람들의 정보는 GROUP BY를 이용해 찾을수 있다. 

정보는  아래를 표시하시오
team_id = 팀코드
player_name = 선수명 , position = 포지션, back_no= 백넘버 , height = 키

select team_id as 팀코드 ,player_name as 선수명, position as 포지션, back_no as 백넘버, height as 키
from player 
where (team_id,height)  IN ( select team_id, MIN(height)
                                         from player
                                         GROUP BY team_id
                                       );


서브쿼리가 [ 소속팀 id ] 와 [ 소속팀별 가장 작은키를] 의미하는 2개의 칼럼을 출력하고,

메인쿼리도 역시 WHERE절에서 [ team_id, height ] 2개의 칼럼으로 넘겨 받았다

(팀이 여러개 존재하므로 다중행 비교연산자 IN 사용)
- 하나 팀에서 키가 제일 작은 선수 한 명씩만 반환된것이 아니다
이유는 , 동일 팀내에서 (팀별 가장 작은키) 를 만족하는 선수가 [ 여러명 존재하기 때문. ]

p,287

4. 연관 서브쿼리

연관서브쿼리는 =  서브쿼리내에 [ 메인쿼리의 칼럼이 사용된 서브쿼리 ]

[ 선수 자신이 속한 팀의 평균키보다 ] 작은 선수들의 정보를 출력하는 SQL문을 연관 서브 쿼리를 이용하여 작성

select b.team_name as 팀명, b.team_id ,a.player_name as 선수명, a.position as 포지션, 
         a.back_no as 백넘버, a.height as 키
from player a, team b  
where a.height  <( select  AVG(x.height)
                           from player x
                           where x.team_id = a.team_id
                           GROUP BY x.team_id
                          )
AND b.team_id = a.team_id
ORDER BY team_id;

- 같은 소속팀 선수들의 평균키보다 크거나 같은 선수들은 조건에 맞지 않기 때문에 출력 x
- 이와 같은 작업을 [ 메인쿼리에 존재하는 ] [ 모든행에 대해서 반복 수행 ]한다.  

EXISTS 서브쿼리는 항상 [ 연관 서브쿼리로 사용 ]된다.
EXISTS 서브쿼리의 특징은 
아무리 [ 조건을 만족하는건이 여러 건이라도 ] [ 조건을 만족하는 1건만 찾으면 추가적인 검색 X  ]

SCHEDULE 테이블
sche_date = 스케줄 날짜 정보가 들어있는 컬럼  --> 20120501 ...~ 

STADIUM 테이블
stadium_id = 경기장 구분 id 
stadium_name = 경지장명

- 다음은 [ EXISTS 서브쿼리를 ] 사용해 '20120501' 부터 '20120502' 사이에 있는 경기장을 조회하는 SQL 문

SELECT a.stadium_id as ID, a.stadium_name as 경기장명
FROM stadium a
WHERE EXISTS (SELECT 1
                       FROM SCHEDULE x
                       WHERE x.stadium_id = a.stadium_id
                       AND x.sche_date BETWEEN '20120501' AND '20120502');

< 조인을 사용해서 한 방법 > 
SELECT a.stadium_id as ID, a.stadium_name as 경기장명
 FROM stadium a,SCHEDULE x
  WHERE x.stadium_id = a.stadium_id
   AND x.sche_date BETWEEN '20120501' AND '20120502'

[ 결과 ] 

ID     경기장명
------ ----------------------------
B01    인천월드컵경기장
B04    수원월드컵경기장
B05    서울월드컵경기장
C02    부산아시아드경기장

p,288

5. 그 밖의 위치에서 사용하는 서브쿼리

가. SELECT 절에서 서브쿼리 사용하기

- [ SELECT절에서 사용하는 서브쿼리를 ] 스칼라 서브쿼리(Scalar Subquery)라 한다.

- 스칼라 서브쿼리는 [ 한 행, 한 칼럼(1 Row 1 Column)만 출력하는 서브쿼리 ]를 말한다.

- (스칼라 서브쿼리 역시 [ 단일행 서브쿼리 ]이기 때문에, 쿼리문의 수행결과가 [ 2건 이상일 경우 에러 발생 ])

- 스칼라 서브 쿼리는 컬럼을 쓸 수 있는 대부분의 곳에서 사용할 수 있다. 

[문제 ]
스칼라 서브쿼리를 이용하여 [ 선수 정보와, 해당 선수가 속한 팀의 평균키 ]를 함께출력

선수정보는 선수명, 키, 평균키를 출력하시오 .
(단, 평균키는 소수점 3째자리 까지만 나타내시오. ) 


select a.player_name as 선수명, a.height as 키, 
round((select avg(b.height) 
          from player b
          where  b.team_id = a.team_id), 3 ) as 팀평균키
from player a ;
 
- 여기서 선수의 [ 소속팀별 평균키를 알아내는 스칼라 서브 쿼리는 ] [ 메인 쿼리의 결과 건수만큼 반복수행 ]

한개의 팀별 먼저 키를 묶어 평균을 내고 , 또다른 팀별 키를 묶어 평균을 내는 형식이다. 


p,290 

나. FROM 절에서 서브쿼리 사용하기
 
FROM 절에서 사용되는 서브쿼리를 인라인 뷰(Inline View) 라고 한다.

[ 인라인 뷰를 사용하면  ] 테이블이 올수 있는 곳에 위치하여, [ 서브쿼리의 수행결과가 테이블처럼 사용 ]된다.

(' 인라인뷰 '는 저장되지 않기 때문에 동적뷰, '뷰'는 정적뷰라고 부르기도 한다)

인라인뷰는 동적인 테이블이기 때문에 ' 메인쿼리에서도 인라인뷰의 칼럼을 사용 할 수 있다. '

[ 문제 ]
케이리그 선수들 중에서 포지션이 미드필더(MF)인 선수들의 소속팀명 및 선수 정보를 출력하고자 한다.
인라인 뷰를 활용해서 SQL문을 만들어 보자.

SELECT t.team_name as 팀명, p.선수명, p.포지션, p.백넘버
FROM (SELECT team_id,player_name as 선수명, position as 포지션, back_no as 백넘버
           FROM player 
           where position ='MF') p, team t
WHERE t.team_id = p.team_id
ORDER BY p.선수명;

- 인라인 뷰를 통해 포지션이 'MF'인 선수들을 추출하고 ,
  인라인 뷰의 결과와 TEAM 테이블이 조인을 해서 " 팀명 "을 출력하고 있다. 
  

P,291 

- 인라인 뷰에서 ORDER BY 절을 사용할 수 있다. 
- 인라인 뷰에서 [ 미리 정렬시킨 데이터에서 ] 특정 데이터를 추출하는 것을 [  TOP-N쿼리 ] 이라 한다.

- 인라인뷰는 동적인 테이블이기 때문에 이를 이용하여 TOP-N을 만드는 것도 가능하다

인라인뷰로 TOP N 쿼리 만들기
[문제 ] 
- 선수명, 포지션, 백넘저 , 키의 정보를 키가큰 순서의 상위 5명의 정보를 출력하시오.  (인라인뷰 사용)
- 단, 인라인뷰 조건중 키값이 NULL 이 아닌경우 ! ORDER BY 로 키를 내림차순 할 것.
- ROWNUM 을 이용하여 상위 5명 정보만 출력할 것. 

SELECT 선수명, 포지션, 백넘버, 키
FROM (SELECT player_name as 선수명, position as 포지션, back_no as 백넘버, height as 키
           FROM PLAYER
           WHERE HEIGHT IS NOT NULL 
           ORDER BY HEIGHT DESC )
WHERE ROWNUM<=5;

[결과]
선수명          포지션                   백넘버         키
--------------- -------------------- ---------- ----------
서동명          GK                           21        196
권정혁          GK                            1        195
정경두          GK                           41        194
김석            FW                           20        194
황연석          FW                           16        192

 

옵티마이저는 FROM절을 1순위로 수행한다. 그러므로, 인라인뷰에서 미리 정렬(ORDER BY)시켜놓은다음,

정렬된 데이터에서 ROWNUM을 이용하여 [ 상위 5개만 추출하면 TOP-N 쿼리의 결과와 ] 같아진다.

(이 쿼리문은 만약 다른 선수중 [ 키가 192인 선수가 더 존재하더라도 ][  해당 SQL 문에서는 데이터가 출력되지 않는다. ]
이런 데이터까지 추출하고자 한다면 [ RANK 관련 분석함수를 사용해야 한다. ] 


P, 291~ 292

다. HAVING 절에서 서브쿼리 사용하기
- HAVING 절은 집계함수와 함께 사용될 때 [ 그룹핑 된 결과에 대해 부가적인 조건을 주기위해 사용 ]

[ 문제 ]
평균 키가 [ 삼성 블루윙즈 팀의 ] 평균키 보다 작은 팀에 대해 
[ 팀 이름과 팀 소속 선수들의 평균키를 ] 구하는 SQL문을 작성

P,224 SELECT 문 실행순서 참고
SELECT p.team_id as 팀코드 ,t.team_name as 팀명, ROUND(AVG(p.height),3) AS 평균키
FROM player p, team t
WHERE t.team_id = p.team_id
GROUP BY p.team_id,t.team_name
HAVING AVG(p.height) < (SELECT AVG(pp.height)
                                        from player pp
                                        where pp.team_id =( SELECT tt.team_id
                                                                       FROM TEAM tt
                                                                       WHERE TEAM_NAME = '삼성블루윙즈'))ORDER BY p.team_id ;    
1. FROM 절먼저 수행
2. WHERE 절로 조인 수행
3. 소그룹화
4. HAVING 조건에 맞는것을출력
5. 조건에 맞는 것을 출력하기위해
   팀명이 '삼성블루윙즈' 인 TEAM_ID 를 이용하여 해당 평균키를 들고오고  [ 그 평균키보다 작은 팀] 의 데이터를 추출

P, 292 ~294

6. 뷰
- 테이블은 실제로 데이터를 갖고 있는 반면, 뷰(View)는 실제 데이터를 갖고 있지 않다.
- 뷰는 단지 [ 정의만을 갖고 있다. ] 
- 질의에서 뷰가 사용되면 뷰 정의를 참조해서 DBMS 내부적으로 질의를 재작성해 질의를 수행

< 뷰 사용의 장점 > 독립성, 편리성, 보안성 (3가지)

1. 독립성 :
-  테이블 구조가 변경돼도 뷰를 사용하는 [ 응용 프로그램은 변경하지 않아도 된다. ]

2. 편리성 :
- 복잡한 질의를 뷰로 생성함으로써 [ 관련 질의를 단순하게 작성가능 ]

3. 보안성 :
 - 직원의 급여정보와 같이 숨기고 싶은 정보가 존재하면 , 
 - 뷰를 생성할 때 [ 해당 컬럼을 빼고 생성함 ]으로써 [ 사용자에게 정보를 감출 수 ] 있다.
-----------------------------------------------------------------------------------------------

P,295

제 2절 집합 연산자

- [ 조인을 사용하지 않고 ] 연관된 데이터를 조회하는 다른 방법은 [ 집합연산자(SET_Operator)를 사용 ]하는 방법

- 집합 연산자는 여러 개의 결과 집합 간의 연산을 통해 결합을 하는 방식 사용
- 즉, 집합 연산자는 2개 이상의 질의 결과를 하나의 결과로 만들어주는 역할을 하게 된다. 

<집합 연산자를 사용하기 위해서는 [ 다음 조건을 만족 ]해야한다 >

-  집합 연산자는 [ SELECT 절의 칼럼 수가 동일 ]하고 
   SELECT 절의 [ 동일 위치에 존재하는 칼럼의 데이터 타입이 상호 교환 가능 ]해야한다.
 
- UNION, INTERSECT, EXCEPT 은 [ 중복된 행은 하나의 행으로 만들지만 ],
- UNION ALL은 중복된 행을 하나의 행으로 만들어주지 않고, [ 중복된 결과가 항상 존재한다. ]


[ 집합연산자의 종류 ]
1. UNION 
- 개별 SQL문 결과들을 " 합집합 "연산(중복없음)

2. UNION ALL 
- 개별 SQL문 결과들의 " 중복을 허용한 합집합 "연산(중복있음. 단순히 결과만 합친것)

3. INTERSECT(인털섹트)
- 개별 SQL문 결과들을 " 교집합 "연산(중복없음)

4. EXCEPT(익셉트)
- 개별 SQL 문의 결과에 대해 "차집합" 연산을 수행
- 앞의 SQL문 결과에 뒤의 SQL결과와 차집합연산(중복없음)
- ORACLE : MINUS 연산자 , SQL Server : EXCEPT 연산자 사용) 

 이는 중복에 대한 정렬 작업이 일어나지 않는다는 특징을 가진다. 글보다는 그림으로 이해하는 편이 훨씬 낫다.
[ 집합연산자를 사용하여 쿼리문을 작성하는 형태의 예시 ]는 다음과 같다.

SELECT PLAYER_NAME 선수명, BACK_NO 백넘버
FROM PLAYER
WHERE TEAM_ID = 'K02'
UNION
SELECT PLAYER_NAME 선수명, BACK_NO 백넘버
FROM PLAYER
WHERE TEAM_ID = 'K07'
ORDER BY 1;

​집합 연산자는 사용상의 제약조건을 만족한다면 어떤 형태의 SELECT문이라도 이용가능

집합 연산자는 여러 개의 SELECT문을 연결하는 것에 지나지 않음

ORDER BY는 집합 연산을 적용한 최종 결과에 대한 정렬 처리이므로 가장 마지막 줄에 한번만 기술



​
