p,298

질문 

[ K-리그 소속 선수들 중에서 ] 소속이 삼성블루윙즈팀인 선수들과 전남드레곤즈팀인 
선수들에 대한 내용을 모두 보고 싶다. 

< 참고 >
해당 소속팀의 선수명, 백넘버 정보를 표시하시오.  
삼성블루윙즈 TEAM_ID = K02
드래곤즈 TEAM_ID = K07 

집합
K-리그 소속 선수 중 소속이 삼성블루윙즈(K02)팀인 선수들의 집합과
K-리그 소속 선수 중 소속이 드래곤즈(K07)팀인 선수들의 집합의 합집합

< 집합 연산자 조건 > 
-  집합 연산자는 [ SELECT 절의 칼럼 수가 동일 ]하고 
   SELECT 절의 [ 동일 위치에 존재하는 칼럼의 데이터 타입이 상호 교환 가능 ]해야한다.

col E_TEAM_NAME for a25
col TEAM_NAME for a25

< 쿼리문> 
SELECT PLAYER_NAME 선수명, BACK_NO 백넘버
FROM PLAYER
WHERE TEAM_ID = 'K02'
UNION
SELECT PLAYER_NAME 선수명, BACK_NO 백넘버
FROM PLAYER
WHERE TEAM_ID = 'K07'

------------------------------------------------------

P, 299 
 [ 아래 2가지 방식은 논리 연산자를 이용한 간단한 쿼리문으로 동일한 결과를 내는 쿼리이다.  ]

< 비교쿼리 > -- > UNION 연산은 SELECT 절 컬럼에 대해 중복건을 제외 하므로 
                         [ DISTINCT 키워드를 기술 ]해야 중복건을 제외한다. 

SELECT DISTINCT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02' OR TEAM_ID = 'K07' ; 

< 비교쿼리 >
SELECT DISTINCT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID IN ('K02', 'K07')


-------------------------------------------------------------
P, 300

질문 
K-리그 소속 선수들 중에서 [ 소속이 삼성블루윙즈팀(K02)인 ] 선수들과 
[ 포지션이 골키퍼(GK)인 ] 선수들을 모두 보고 싶다.

집합
 K-리그 소속 선수 중 소속이 삼성블루윙즈팀인 선수들의 집합과
 K-리그 소속 선수 중 포지션이 골키퍼(GK)인 선수들의 집합의 [ 합집합 ]

SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02'
UNION
SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE POSITION = 'GK';

< 비교쿼리 > -- > UNION 연산은 SELECT 절 컬럼에 대해 [ 중복건을 제외 ] 하므로 
                         [ DISTINCT 키워드를 기술 ]해야 중복건을 제외한다. 

< 논리 연산자를 이용한 간단한 쿼리문 >

SELECT DISTINCT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02' OR POSITION ='GK';


------------------------------------------------------
P,302 
두 집합 간의 [ 중복된 건을 확인해 보고자 할 때 SQL 문 ]

SELECT 팀코드, 선수명, 포지션, 백넘버, 키, COUNT(*) AS 중복수 
FROM ( SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버,                    HEIGHT 키
           FROM PLAYER
           WHERE TEAM_ID = 'K02'
           UNION ALL
           SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버,                     HEIGHT 키
           FROM PLAYER
           WHERE POSITION = 'GK')
GROUP BY 팀코드,선수명,포지션,백넘버,키
HAVING COUNT(*)>1;
-- 결과를 보면 삼성블루윙즈 팀인 선수 집합과 포지션이 골키퍼(GK)인 선수 집합간에 [ 중복 건이 존재함을 볼 수 있다.  ]
[결과 ]
팀코드 선수명          포지션                   백넘버         키     중복수
------ --------------- -------------------- ---------- ---------- ----------
K02    최호진          GK                           31        190          2
K02    조범철          GK                           21        185          2
K02    김운재          GK                            1        182          2
K02    정광수          GK                           41        182          2



질문
 K-리그 소속 선수들에 대한 정보 중에서 [ 포지션별 평균키 ]와 [ 팀별 평균키 ]를 알고 싶다.
집합 
 K-리그 소속 선수 중 [ 포지션별 ] 평균키에 대한 집합과 
 K-리그 소속 선수 중 [ 팀별 ] 평균키에 대한 집합의 합집합  

- 실제로 [ 테이블에 존재하지 않지만 ] 결과 행을 구분하기 위해 [ 임의의 컬럼을 추가할 수 있음 ]을 알 수있다.

SELECT  'P' AS 구분코드 ,POSITION 포지션, ROUND(AVG(HEIGHT),3) 키
FROM PLAYER
GROUP BY POSITION
UNION 
SELECT 'T' AS 구분코드 ,TEAM_ID 팀코드, ROUND(AVG(HEIGHT),3) 키
FROM PLAYER
GROUP BY TEAM_ID
ORDER BY 1;

----------------------------------------------
P,304 

질문
 K-리그 소속 선수를 중에서 소속이 삼성블루윙즈팀이면서
 [ 포지션이 미드필더(MF)가 아닌 ] 선수들의 정보를 보고 싶다.  

집합 
 K-리그 소속 선수 중 소속이 삼성블루윙즈팀(K02) 인 선수들의 집합과
 K-리그 소속 선수 중 포지션이 미드필더(MF)인 선수들의 집합의 [ 차집합(MINUS)  ] 

-- 즉, 삼성 블루윙즈 팀의 선수들중에서 [ 포지션이 미드필드인 선수들의 정보를 빼는것. ]

SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02'
MINUS
SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE POSITION = 'MF'
ORDER BY 1,2,3,4,5;

-----------------------------------------------------------
P,305
MINUS/EXCEPT 연산은 NOT EXISTS 또는 NOT IN 서브쿼리를 이용한 SQL문으로 변경가능

1. 
SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02' AND POSITION <> 'MF'
ORDER BY 1,2,3,4,5;

2. 
SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02' AND POSITION NOT IN 'MF'
ORDER BY 1,2,3,4,5;

3. 
SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02' AND PLAYER_ID NOT IN (SELECT PLAYER_ID
                                                                          FROM PLAYER
                                                                          WHERE POSITION='MF')
ORDER BY 1,2,3,4,5;

4. 
SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER X
WHERE X.TEAM_ID = 'K02' AND NOT EXISTS( SELECT 1 
                                                                  FROM PLAYER Y 
                                                                  WHERE Y.PLAYER_ID = X.PLAYER_ID
                                                                  AND POSITION = 'MF')
 ORDER BY 1, 2, 3, 4, 5;


-------------------------------------------------------------------------
P,306
질문
 K-리그 소속 선수들 중에서 소속이 삼성블루윙즈팀(K02)이면서 
 포지션이 골키퍼(GK)인 선수들의 정보를 보고 싶다.  
집합
 K-리그 소속 선수 중 소속이 삼성블루윙즈팀인 선수들의 집합과
 K-리그 소속 선수 중 포지션이 골키퍼(GK)인 선수들의 집합의 교집합(INTERSECT)

SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02'
INTERSECT
SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE POSITION = 'GK'
ORDER BY 1,2,3,4,5;

[결과]
팀코드 선수명          포지션                   백넘버         키
------ --------------- -------------------- ---------- ----------
K02    김운재          GK                            1        182
K02    정광수          GK                           41        182
K02    조범철          GK                           21        185
K02    최호진          GK                           31        190

P,307

INTERSECT 연산은 EXISTS 또는 IN [ 서브쿼리 ]를 이용한 SQL문으로 변경가능.

SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02' AND PLAYER_ID  IN (SELECT PLAYER_ID
                                                                    FROM PLAYER
                                                                    WHERE POSITION='GK')
ORDER BY 1,2,3,4,5;


SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER X
WHERE X.TEAM_ID = 'K02' AND EXISTS( SELECT 1 
                                                           FROM PLAYER Y 
                                                           WHERE Y.PLAYER_ID = X.PLAYER_ID
                                                           AND POSITION = 'GK')
 ORDER BY 1, 2, 3, 4, 5;

< 두 집합의 조건이 모두 [ 동일 테이블에 ] 있다면 아래와 같이 [ 논리 연산자 ]를 이용한 >
SELECT TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM PLAYER
WHERE TEAM_ID = 'K02' AND POSITION = 'GK'
ORDER BY 1,2,3,4,5;
-----------------------------------------------------------
P,308

■ ANSI/ISO SQL 표준은 [ 데이터 분석을 위해 ]서 다음 [ 세 가지 함수를 정의 ]하고 있다.

    - AGGREGATE FUNCTION

    - GROUP FUNCTION

    - WINDOW FUNCTION

■  AGGREGATE FUNCTION

- GROUP AGGREGATE FUNCTION이라고도 부르며, [ GROUP FUNCTION의 한 부분 ]으로 분류할 수 있다.

- 1장 7절에서 설명한 COUNT, SUM, AVG, MAX, MIN 외 [ 각종 집계 함수들이 포함 ]되어 있다.

​
■  GROUP FUNCTION

- 그룹 함수로는 [ 집계 함수를 제외 ]하고, [ 소그룹 간의 소계를 ] 계산하는 [ ROLLUP 함수 ]
  [ GROUP BY 항목 간 다차원적인 소계 ]를 계산할 수 있는 [ CUBE 함수 ], 
  [ 특정항목에 대한 소계를 계산 ]하는 [ GROUPING SETS 함수 ]가 있다.
   
- [ ROLLUP은 ] [ GROUP BY의 확장된 형태로 사용하기가 쉬우며 ] [ 병렬로 수행이 가능 ]하기 때문에 
  매우 효과적일 뿐 아니라 [ 시간 및 지역처럼 계층적 분류를 포함하고 있는 ] 데이터의 집계에 적합하도록 되어 있다.

- CUBE는 [ 결합 가능한 모든 값에 대하여 ] [ 다차원적인 집계를 생성 ]하게 되므로 
  [ ROLLUP에 비해 다양한 데이터를 얻는 장점 ]이 있는 반면에, [ 시스템에 부하를 많이 주는 단점 ]이 있다.

- GROUPING SETS는 [ 원하는 부분의 소계만 손쉽게 추출 ]할 수 있는 장점이 있다.
  또, GROUP BY SQL 문장을 [ 여러번 반복하지 않아도 ] 원하는 결과를 쉽게 얻을 수 있게 되었다. 
  GROUPING SETS 인수들은 [ 평등한 관계이므로 ] [ 인수의 순서가 바뀌어도 결과는 같다. ]

- ROLLUP, CUBE, GROUPING SETS 결과에 대한 정렬이 필요한 경우는 ORDER BY 절에 정렬 칼럼을 명시해야 한다.

​■ WINDOW FUNCTION
- 분석함수(ANALYTIC FUNCTION), 순위함수 (RANK FUNCTION)로도 알려진 윈도우 함수는
  [ 데이터 웨어하우스에서 발전한 기능 ]

-------------------------------------------------------
P,309

2. ROLLUP 함수
- ROLLUP에 지정된 Grouping Columns의 List는 Subtotal을 생성하기 위해 사용되어지며,
  [ Grouping Columns의 수를 N ]이라고 했을 때 [ N+1 Level의 Subtotal이 생성 ]된다.

- ROLLUP의 인수는 [ 계층 구조이므로 ] 인수 순서가 바뀌면 수행 결과도 바뀌게 되므로 [ 인수의 순서에도 주의 ]해야 한다.


STEP 1. 일반적인 GROUP BY 절 사용

예제) [ 부서명과 직업명을 기준 ]으로 [ 사원수와 급여 합을 집계한 ] 일반적인 GROUP BY SQL 문장을 수행한다

SELECT  D.DNAME 부서명, E.JOB 직업명, COUNT(*) 사원수, SUM(E.SAL) 급여합
FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO
GROUP BY D.DNAME ,E.JOB
ORDER BY 2;
-----------------------------------------------

P,310
- 부서명과 업무명을 기준으로 집계한 일반적인 GROUP BY SQL 문장에 ORDER BY 절을 사용함으로써
  < 부서명, 업무별(JOB) 로 정렬이 이뤄진다. > 
SELECT  D.DNAME 부서명, E.JOB 직업명, COUNT(*) 사원수, SUM(E.SAL) 급여합
FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO
GROUP BY D.DNAME ,E.JOB
ORDER BY 1,2;

[ 결과 ]

부서명                            직업명                   사원수     급여합
---------------------------- ------------------       ----------  ----------
ACCOUNTING                   CLERK                        1       1300
ACCOUNTING                   MANAGER                  1       2450
ACCOUNTING                   PRESIDENT                 1       5000
RESEARCH                        ANALYST                   2       6000
RESEARCH                        CLERK                       2       1900
RESEARCH                       MANAGER                  1       2975
SALES                              CLERK                       1        950
SALES                              MANAGER                 1       2850
SALES                              SALESMAN                4       5600

9 행이 선택되었습니다.
STEP 2. ROLLUP 함수 사용
예제 부서명과 업무명(JOB)을 기준으로 집계한 일반적인 GROUP BY SQL 문장에 ROLLUP 함수를 사용한다

SELECT  D.DNAME 부서명, E.JOB 직업명, COUNT(*) 사원수, SUM(E.SAL) 급여합
FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO
GROUP BY ROLLUP( D.DNAME ,E.JOB);


레벨 = 컬럼수(2) + 1 레벨 = 3레벨 
L1  = GROUP BY 수행 시 생성되는 표준 집계(9건)
L2 = DNAME 별 모든 [ JOB 의 SUBTOTAL(3건) ] --> 부서별 직종의 총합 급여 
L3 = GRAND TOTAL ( 마지막 행 1건) -->전체 부서의 인원수와, 급여 통합을 나타냄 . 

ROLLUP의 경우 계층 간 집계에 대해서는 LEVEL별 순서 (L1 -> L2 -> L3)를 정렬하지만, 
[ 계층 내 GROUP BY 수행시 생성되는 표준 집계에는 ] [ 별도의 정렬을 지원 X ] 
--> L1, L2 ,L3 계층 내 정렬을 위해서는 별도의 ORDER BY 절을 사용해야한다. 

-------------------------------------------------------------------------------------

P,312 ~ 313

STEP 3. GROUPING 함수 사용
- ROLLUP 이나 CUBE 에 의한 [ 소계가 계산된 결과 ]에는 GROUPING(EXPR) =1 이 표시된다.
- GROUPING 함수와 CASE/DECODE를 이용해 , 소계를 나타내는 필드에 원하는 문자열을 저장할 수있어서
 보고서 작성시 유용하게 사용할 수 있다. 

예제 ROLLUP 함수를 추가한 집계 보고서에서 [ 집계 레코드를 구분 ]할 수 있는 
[ GROUPING 함수 ]가 추가된 SQL 문장이다.

SELECT  D.DNAME 부서명, GROUPING(D.DNAME), E.JOB 직업명, GROUPING(E.JOB),
            COUNT(*) 사원수, SUM(E.SAL) 급여합
FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO
GROUP BY ROLLUP( D.DNAME ,E.JOB)
ORDER BY 1,2;

- 부서별, 업무별과 [ 전체 집계를 표시한 레코드 ]에서는 [ GROUPING 함수가 1을 리턴 ]한 것을 확인할 수 있다.

- 그리고 [ 전체 합계를 나타내는 결과 라인에서는 ] 부서별 GROUPING 함수와 업무별 GROUPING 함수가 
  둘 다 1인 것을 알 수 있다.


-------------------------------------------------------

P,313 ~ 314

STEP 4. GROUPING 함수 + CASE 사용

예제 ROLLUP 함수를 추가한 집계 보고서에서 [ 집계 레코드를 구분할 수 있는 ] 
GROUPING 함수와 CASE 함수를 함께 사용한 SQL 문장을 작성한다.

SELECT CASE GROUPING(D.DNAME) WHEN 1 THEN 'All Departments'
                                                    ELSE D.DNAME END AS 부서명,
           CASE GROUPING(E.JOB) WHEN 1 THEN 'All Jobs' 
                                                ELSE E.JOB END AS 직업명,
           COUNT(*) "사원수", SUM(E.SAL) "총합"
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO
GROUP BY ROLLUP (D.DNAME, E.JOB)
ORDER BY D.DNAME,E.JOB;


[ Oracle의 경우는 ] DECODE 함수를 사용해서 좀더 짧게 표현할 수 있다.

SELECT DECODE(GROUPING(D.DNAME), 1, 'All Departments', D.DNAME) AS 부서명,
           DECODE(GROUPING(E.JOB), 1, 'All Jobs', E.JOB) AS 직종, COUNT(*) "사원수",
           SUM(SAL) "급여합"
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO
GROUP BY ROLLUP (D.DNAME, E.JOB);


[결과]
부서명              직업명                 사원수       총합
---------------   ------------------  ---------- ----------
ACCOUNTING      CLERK                       1       1300
ACCOUNTING      MANAGER                 1       2450
ACCOUNTING      PRESIDENT                1       5000

ACCOUNTING      All Jobs                     3       8750  -- 부서별 모든 직종의 인원수, 총급여를 나타내는 필드. 

RESEARCH          ANALYST                    2       6000
RESEARCH          CLERK                        2       1900
RESEARCH          MANAGER                  1       2975

RESEARCH          All Jobs                      5      10875

SALES                CLERK                         1        950
SALES                MANAGER                   1       2850
SALES                SALESMAN                  4       5600

SALES                All Jobs                       6       9400

All Departments All Jobs                      14      29025
- 결과를 보면 부서별과, 전체 집계를 표시한 레코드에서 'All Departments'와 'All jobs'라는
사용자 정의 텍스트를 확인할 수 있다. 

----------------------------------------------------------
P,313
STEP 4-2. ROLLUP 함수 일부 사용
예제 GROUP BY ROLLUP (DNAME, JOB) 조건에서 GROUP BY DNAME, ROLLUP(JOB) 조건으로 변경한 경우이다.


SELECT CASE GROUPING(D.DNAME) WHEN 1 THEN 'All Departments'
                                                    ELSE D.DNAME END AS 부서명,
           CASE GROUPING(E.JOB) WHEN 1 THEN 'All Jobs' 
                                                ELSE E.JOB END AS 직업명,
           COUNT(*) "사원수", SUM(E.SAL) "총합"
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO
GROUP BY D.DNAME, ROLLUP(E.JOB)
ORDER BY D.DNAME,E.JOB;

- 결과는 마지막 ALL DEPARTMENTS &ALL JOBS 줄만 계산이 되지 않았다.
  ROLLUP이 [ JOB 칼럼에만 사용되었기 때문에 ] DNAME에 대한 집계는 필요하지 않기 때문이다.

[결과]
부서명              직업명                 사원수       총합
---------------   ------------------  ---------- ----------
ACCOUNTING      CLERK                       1       1300
ACCOUNTING      MANAGER                 1       2450
ACCOUNTING      PRESIDENT                1       5000
ACCOUNTING      All Jobs                     3       8750  -- 부서별 모든 직종의 인원수, 총급여를 나타내는 필드. 
RESEARCH          ANALYST                    2       6000
RESEARCH          CLERK                        2       1900
RESEARCH          MANAGER                  1       2975
RESEARCH          All Jobs                      5      10875
SALES                CLERK                         1        950
SALES                MANAGER                   1       2850
SALES                SALESMAN                  4       5600
SALES                All Jobs                       6       9400

--------------------------------------------------------------------
P,316
STEP 4-3. ROLLUP 함수 [ 결합 칼럼 사용 ]
예제) JOB과 MGR는 하나의 집합으로 간주하고, 부서별, JOB &MGR에 대한 ROLLUP 결과를 출력한다.

SELECT  D.DNAME 부서명, E.JOB 직업명, E.MGR AS 상사번호,COUNT(*) "사원수", SUM(E.SAL) "총합"
FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO
GROUP BY ROLLUP(D.DNAME ,(E.JOB,E.MGR))
ORDER BY 1,2,3;

- 결과중 하나를 해석하자면 ACCOUNTING 부서에 'CLERK' 직업을가진 상사의 번호와, 
   직종이 같은 인원수, 같은 직종의 총급여를 표시.

- - ROLLUP 함수 사용시 괄호로 묶은 [ JOB과 MGR의 경우 ] 하나의 집합(JOB+MGR) 칼럼으로 간주하여
    [ 괄호 내 각 칼럼별 집계를 구하지 않는다. ]

--------------------------------------------------------------------
P,317 ~ 318
3. CUBE 함수

- ROLLUP에서는 단지 가능한 Subtotal만을 생성하였지만, 
  CUBE는 [ 결합 가능한 모든 값에 대하여 다차원 집계 ]를 생성한다.

- CUBE를 사용할 경우에는 [ 내부적으로는 Grouping Columns의 순서를 바꾸어서 ]
  [ 또 한 번의 Query를 추가 수행해야 한다. ]

- 뿐만 아니라 Grand Total은 [ 양쪽의 Query 에서 모두 생성이 ] 되므로 
 한 번의 Query에서는 제거되어야만 하므로[  ROLLUP에 비해 시스템의 연산 대상이 많다. ]

- 이처럼 Grouping Columns이 가질 수 있는 [ 모든 경우에 대하여 ] Subtotal을 생성해야 하는 경우에는 
  CUBE를 사용하는 것이 바람직하나, [ ROLLUP에 비해 시스템에 많은 부담을 주므로 ] 사용에 주의해야 한다.

- CUBE 함수의 경우 [ 표시된 인수들에 대한 ] [ 계층별 집계를 구할 수 ] 있으며,
  이때 표시된 인수들 간에는 [ 계층 구조인 ROLLUP과는 달리 ] 평등한 관계이므로 인수의 순서가 바뀌는 경우 
  [ 행간에 정렬 순서는 바뀔 수 있어도 ] [ 데이터 결과는 같다. ]

STEP 5. CUBE 함수 이용

예제 GROUP BY ROLLUP (DNAME, JOB) 조건에서 [ GROUP BY CUBE (DNAME, JOB) 조건으로 변경 ]해서 수행한다.

SELECT CASE GROUPING(D.DNAME) WHEN 1 THEN 'All Departments'
                                                    ELSE D.DNAME END AS 부서명,
           CASE GROUPING(E.JOB) WHEN 1 THEN 'All Jobs' 
                                                ELSE E.JOB END AS 직업명,
           COUNT(*) "사원수", SUM(E.SAL) "총합"
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO
GROUP BY CUBE (D.DNAME, E.JOB)
ORDER BY D.DNAME,E.JOB;

[결과 ]

부서명               직업명                 사원수       총합
---------------     ------------------ ---------- ----------
ACCOUNTING      CLERK                   1       1300
ACCOUNTING      MANAGER             1       2450
ACCOUNTING      PRESIDENT            1       5000
ACCOUNTING      All Jobs                 3       8750
RESEARCH          ANALYST                2       6000
RESEARCH          CLERK                     2       1900
RESEARCH         MANAGER                1       2975
RESEARCH         All Jobs                    5      10875
SALES               CLERK                       1        950
SALES               MANAGER                 1       2850
SALES               SALESMAN                4       5600
SALES               All Jobs                     6       9400
All Departments ANALYST                   2       6000
All Departments CLERK                       4       4150
All Departments MANAGER                 3       8275
All Departments PRESIDENT                1       5000
All Departments SALESMAN                4       5600
All Departments All Jobs                   14      29025

18 행이 선택되었습니다.
- CUBE는 GROUPING COLUMNS이 가질 수 있는 모든 경우의 수에 대하여 Subtotal을 생성하므로
  GROUPING COLUMNS의 수가 N이라고 가정하면, 2의 N승 LEVEL의 Subtotal을 생성하게 된다.

- 실행 결과에서 CUBE 함수 사용으로 ROLLUP 함수의 결과에다 [ 업무별 집계까지 추가해서 출력 ]할 수 있는데,
  ROLLUP 함수에 비해 [ 업무별 집계를 표시한 5건의 레코드가 추가된 것 ]을 확인할 수 있다.
   (All Departments - CLERK, ANALYST, MANAGER, SALESMAN, PRESIDENT 별 집계가 5건 추가되었다.)

P,318 ~ 319
STEP 5-2. UNION ALL 사용 SQL

- UNION ALL은 Set Operation 내용으로, 여러 SQL 문장을 연결하는 역할을 할 수 있다.
  위 SQL은 첫 번째 SQL 모듈부터 차례대로 결과가 나오므로 위 CUBE SQL과 결과 데이터는 같으나
 행들의 정렬은 다를 수 있다.
SELECT DNAME, JOB, COUNT(*) "Total Empl", SUM(SAL) "Total Sal"
FROM EMP, DEPT
WHERE DEPT.DEPTNO = EMP.DEPTNO
GROUP BY DNAME, JOB
UNION ALL
SELECT DNAME, 'All Jobs', COUNT(*) "Total Empl", SUM(SAL) "Total Sal"
FROM EMP, DEPT
WHERE DEPT.DEPTNO = EMP.DEPTNO
GROUP BY DNAME
UNION ALL
SELECT 'All Departments', JOB, COUNT(*) "Total Empl", SUM(SAL) "Total Sal"
FROM EMP, DEPT
WHERE DEPT.DEPTNO = EMP.DEPTNO
GROUP BY JOB
UNION ALL
SELECT 'All Departments', 'All Jobs', COUNT(*) "Total Empl", SUM(SAL) "Total Sal"
FROM EMP, DEPT
WHERE DEPT.DEPTNO = EMP.DEPTNO;

- CUBE 함수를 사용하면서 가장 크게 개선되는 부분은 CUBE 사용 전 
  SQL에서 EMP, DEPT 테이블을 [ 네 번이나 반복 액세스하는 부분을 ] 
  CUBE 사용 SQL에서는 한 번으로 줄일 수 있는 부분이다. 
- 기존에 같은 테이블을 네 번 액세스하는 이유가 되었던 [ 부서와 업무별 소계 ]와 [ 총계 부분 ]을 
  CUBE 함수를 사용함으로써 [ 한 번의 액세스만으로 구현 ]한다. 
- 결과적으로 수행속도 및 자원 사용율을 개선할 수 있으며, SQL 문장도 더 짧아졌으므로 가독성도 높아졌다. 
  실행 결과는 STEP5의 결과와 동일하다. ROLLUP 함수도 똑 같은 개선 효과를 얻을 수 있다.

P,319 ~320

4. GROUPING SETS 함수

- GROUPING SETS를 이용해 [ 더욱 다양한 소계 집합을 만들 수 ] 있는데,
  GROUP BY SQL 문장을 [ 여러 번 반복하지 않아도 원하는 결과를 쉽게 얻을 수 있게 ] 되었다.
 
- GROUPING SETS에 표시된 인수들에 대한 [ 개별 집계를 구할 수 있으며 ], 
  이때 표시된 인수들 간에는 계층 구조인 ROLLUP과는 달리 평등한 관계이므로 [ 인수의 순서가 바뀌어도 결과는 같다. ]
 - 그리고 GROUPING SETS 함수도 결과에 대한 정렬이 필요한 경우는 
   ORDER BY 절에 명시적으로 정렬 칼럼이 표시가 되어야 한다.


■ 일반 그룹함수를 이용한 SQL
예제 일반 그룹함수를 이용하여 [ 부서별 ], [ JOB별 ] 인원수와 급여 합을 구하라.  -- UNION ALL 사용하여  푸시오. 

[결과 ]  --> 아래 결과를 참고하며 UNION ALL 을 사용하여 푸시오. 
부서명          직업명                 사원수     급여합
--------------- ------------------ ---------- ----------
RESEARCH        All Jobs                    5      10875
SALES           All Jobs                    6       9400
ACCOUNTING      All Jobs                    3       8750
All Departments CLERK                       4       4150
All Departments SALESMAN                    4       5600
All Departments ANALYST                     2       6000
All Departments MANAGER                     3       8275
All Departments PRESIDENT                   1       5000

8 행이 선택되었습니다.
SELECT  D.DNAME 부서명, 'All Jobs' AS 직업명,
            COUNT(*) 사원수, SUM(E.SAL) 급여합
FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO
GROUP BY D.DNAME
UNION ALL 
SELECT  'All Departments' AS 부서명 , E.JOB 직업명,
            COUNT(*) 사원수, SUM(E.SAL) 급여합
FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO
GROUP BY E.JOB


-----------------------------------------------------------------

P,320 ~ 321
■  GROUPING SETS 사용 SQL
예제 일반 그룹함수를 GROUPING SETS 함수로 변경하여 부서별, JOB별 인원수와 급여 합을 구하라.

SELECT CASE GROUPING(D.DNAME) WHEN 1 THEN 'All Departments'
                                                    ELSE D.DNAME END AS 부서명,
           CASE GROUPING(E.JOB) WHEN 1 THEN 'All Jobs' 
                                                ELSE E.JOB END AS 직업명,
           COUNT(*) "사원수", SUM(E.SAL) "총합"
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO
GROUP BY GROUPING SETS(D.DNAME, E.JOB)
ORDER BY D.DNAME,E.JOB;

- GROUPING SETS 함수 사용시 [ UNION ALL을 사용한 일반 그룹함수를 사용한 SQL과 같은 결과 ]를 얻을 수 있으며,
 괄호로 묶은 집합 별로(괄호 내는 계층 구조가 아닌 [ 하나의 데이터로 간주함 ]) 집계를 구할 수 있다.

- GROUPING SETS의 경우 일반 그룹함수를 이용한 SQL과 결과 데이터는 같으나 행들의 정렬 순서는 다를 수 있다.

-------------------------------------------------------------
P,321 ~ 322
■ GROUPING SETS 사용 SQL - 순서 변경

예제 일반 그룹함수를 GROUPING SETS 함수로 변경하여 부서별, JOB별 인원수와 급여 합을 구하는데 
GROUPING SETS의 인수들의 순서를 바꾸어 본다.
SELECT CASE GROUPING(D.DNAME) WHEN 1 THEN 'All Departments'
                                                    ELSE D.DNAME END AS 부서명,
           CASE GROUPING(E.JOB) WHEN 1 THEN 'All Jobs' 
                                                ELSE E.JOB END AS 직업명,
           COUNT(*) "사원수", SUM(E.SAL) "총합"
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO
GROUP BY GROUPING SETS(E.JOB,D.DNAME)
ORDER BY D.DNAME,E.JOB;

- GROUPING SETS 인수들은 평등한 관계이므로 [ 인수의 순서가 바뀌어도 결과는 같다. ]
   (JOB과 DNAME의 순서가 바뀌었지만 결과는 같다.)

-------------------------------------------------------------
P,322 ~ 323
■ 3개의 인수를 이용한 [ GROUPING SETS 이용 ]
예제) 부서-JOB-매니저 별 집계와, 부서-JOB 별 집계와, JOB-매니저 별 집계를 GROUPING SETS 함수를 이용해서 구해본다.
- GROUPING SETS 함수 사용시 괄호로 묶은 집합별로(괄호 내는 계층구조가 아닌 하나의 데이터로 간주함) 집계를 구할 수 있다.
SELECT  D.DNAME  AS 부서명, E.JOB AS 직업명, E.MGR "상사번호",
           COUNT(*) "사원수", SUM(E.SAL) "총합"
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO
GROUP BY GROUPING SETS((D.DNAME, E.JOB,E.MGR), (D.DNAME,E.JOB),(E.JOB,E.MGR))
ORDER BY 1,2,3 ;

[결과 ]
부서명               직업명                 상사번호      사원수       총합
---------------     ------------------     ----------     ----------  ----------
     < (DNAME+ JOB+MGR) 기준의 집계 10개 . >
ACCOUNTING      CLERK                    7782          1          1300
ACCOUNTING      CLERK                                     1          1300
ACCOUNTING      MANAGER              7839          1          2450
ACCOUNTING      MANAGER                               1          2450
ACCOUNTING      PRESIDENT                              1          5000
ACCOUNTING      PRESIDENT                              1          5000
RESEARCH           ANALYST               7566           2          6000
RESEARCH           ANALYST                                 2          6000
RESEARCH           CLERK                    7788          1         1100
RESEARCH           CLERK                    7902          1          800

     < (DNAME+JOB) 기준의 집계 9개 . >
RESEARCH           CLERK                                     2          1900
RESEARCH           MANAGER              7839          1          2975
RESEARCH           MANAGER                               1          2975
SALES                 CLERK                     7698          1            950
SALES                 CLERK                                      1            950
SALES                 MANAGER               7839          1          2850
SALES                 MANAGER                                1          2850
SALES                 SALESMAN              7698          4          5600
SALES                SALESMAN                                4          5600
                     
                         < (JOB+MGR) 기준의 집계 8개 . >
                         ANALYST                 7566          2          6000
                         CLERK                     7698          1            950
                         CLERK                     7782          1          1300
                         CLERK                     7788          1          1100
                         CLERK                     7902          1            800
                         MANAGER              7839           3          8275
                         PRESIDENT                               1          5000
                         SALESMAN                 7698          4       5600

27 행이 선택되었습니다.

- 실행 결과에서 첫 번째 10건의 데이터는 (DNAME+JOB+MGR) 기준의 집계이며,
- 두 번째 8건의 데이터는 (JOB+MGR) 기준의 집계이며, 세 번째 9건의 데이터는 (DNAME+JOB) 기준의 집계이다.

------------------------------------------------------------------------
P,324 

1. WINDOW FUNCTION 개요

-  행과 행간의 관계를 쉽게 정의하기 위해 만든 함수가 WINDOW FUNCTION 이다
- 윈도우 함수를 활용하면 복잡한 프로그램을 하나의 SQL 문장으로 쉽게 해결할 수 있다.

<  WINDOW FUNCTION 종류 >

1. 순위(RANK) 관련 함수 : RANK, DENSE_RANK, ROW_NUMBER가있다. 
  (ANSI/ISO SQL 표준 / Oracle / SQL Server 등 대부분 DBMS 지원)

2. 집계(AGGREGATE) 관련 함수 : SUM, MAX, MIN, AVG, COUNT 가 있다. 
 (ANSI/ISO SQL 표준 / Oracle / SQL Server 등 대부분 DBMS지원),
 SQL Server의 경우 집계 함수는 OVER 절 내의 ORDER BY 구문을 지원하지 않는다.

3. 그룹 내 행 순서 관련 함수 : FIRST_VALUE, LAST_VALUE, LAG, LEAD가 있다.  (Oracle에서만 지원되는 함수)

4. 그룹 내 비율 관련 함수 : CUME_DIST, PERCENT_RANK, NTILE, RATIO_TO_REPORT가 있다.
 CUME_DIST, PERCENT_RANK 함수는: ANSI/ISO SQL 표준과 Oracle 지원 
 NTILE 함수는 : ANSI/ISO SQL 표준에는 없지만, Oracle / SQL Server 지원 
 RATIO_TO_REPORT 함수는 : Oracle 에서만 지원)

5. 선형 분석을 포함한 통계 분석 관련 함수 -- 통계에 특화된 기능이므로 본가이드에서 설명 생략

(참조) Oracle의 통계 관련 함수CORR, COVAR_POP, COVAR_SAMP, STDDEV, STDDEV_POP, STDDEV_SAMP, VARIANCE, VAR_POP, VAR_SAMP, REGR_(LINEAR REGRESSION), REGR_SLOPE, REGR_INTERCEPT, REGR_COUNT, REGR_R2, REGR_AVGX, REGR_AVGY, REGR_SXX, REGR_SYY, REGR_SXY

 



